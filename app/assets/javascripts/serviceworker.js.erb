<% self.class.include Webpacker::Helper %>
var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
      caches.open(CACHE_NAME).then(function prefill(cache) {
        return cache.addAll([
          // make sure serviceworker.js is not required by application.js
          // if you want to reference application.js from here
          '<%= asset_pack_path "public.js" %>',
          '<%= asset_path "public.css" %>',
          '<%= asset_path "application.js" %>',
          '<%= asset_path "application.css" %>',
          '<%= asset_path "dark_ritual/bgfooter.gif" %>',
          '<%= asset_path "dark_ritual/header_left.png" %>',
          '<%= asset_path "dark_ritual/header_lines.png" %>',
          '<%= asset_path "dark_ritual/header_right.png" %>',
          '/',
          '/favicon.ico',
          '/offline.html',
        ]);
      })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
      caches.keys().then(function(cacheNames) {
        return Promise.all(
            cacheNames.filter(function(cacheName) {
              // Return true if you want to remove this cache,
              // but remember that caches are shared across
              // the whole origin
              return cacheName.indexOf(CACHE_VERSION) !== 0;
            }).map(function(cacheName) {
              return caches.delete(cacheName);
            })
        );
      })
  );
}

// https://developers.google.com/web/ilt/pwa/caching-files-with-service-worker
function onFetch(event) {
  if (event.request.method !== "GET") {
    return;
  }
  event.respondWith(
      // try to return untouched request from network first
      fetch(event.request).then(function(response) {
        let response_copy = response.clone();
        if (response.status < 300) {
          caches.open(CACHE_NAME).then(function(cache) {
            cache.put(event.request, response_copy);
          });
        }

        // Return the original response object, which will be used to fulfill the resource request.
        return response;
      }).catch(function() {
        // if it fails, try to return request from the cache
        console.log('  Request for %s failed', event.request.url);
        return caches.open(CACHE_NAME).then(function(cache) {
          return cache.match(event.request).then(function(response) {
            console.log('  Cache for %s: %s', event.request.url, response);
            if (response) {
              return response;
            }
            // if not found in cache, return default offline content for navigate requests
            console.log('  Show offline for %s', event.request.url);
            return cache.match('/offline.html');
          }).catch(function() {
            // If both fail, show a generic fallback:
            console.log('[Serviceworker]', "Fetching offline content", event);
            return cache.match('/offline.html');
          })
        })
      })
  );
}

function onPush(event) {
  console.log('[Service Worker] Push Received.');
  var message = (event.data && event.data.json()) || {};
  console.log('[Service Worker] message:');
  console.trace(message);
  var actions = [
    {action: 'close', title: 'Lukk'}
  ];
  if (message.data.practice_id) {
    actions.unshift({action: 'open', title: 'Ã…pne'});
  }
  event.waitUntil(
      self.registration.showNotification(message.title || "<No title>", {
        body: message.body,
        icon: "/icon/192.png",
        badge: "/icon/notification.png",
//            image: "/icon/192.png",
        tag: message.tag,
        actions: actions,
        data: message.data
      })
  )
}

<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

function onNotificationClick(event) {
  console.log('[Service Worker] Notification click Received.');
  console.log('On notification click: ', event.notification.tag);
  console.log('event.notification.action: ', event.notification.action);
  console.log('event.action: ', event.action);
  console.trace('event.notification: ', event.notification);
  console.trace('event.notification.data: ', event.notification.data);
//    console.trace('event.notification.data.practice_id: ', event.notification.data.practice_id);
  console.trace('event.data: ', event.data);

  if (event.action == 'close') {
    event.notification.close();
  } else if (event.action == 'open' || !event.action) {
    event.notification.close();
    event.waitUntil(
        clients.openWindow('<%= practices_url %>/' + event.notification.data.practice_id)
    );
  } else {
    console.log('onNotificationClick', 'Unknown action: ' + event.action);
  }
}

self.addEventListener('pushsubscriptionchange', function(e) {
  e.waitUntil(registration.pushManager.subscribe(e.oldSubscription.options)
      .then(function(subscription) {
        // TODO: Send new subscription to application server
        console.log('Subscribed after expiration: endpoint: ', subscription.endpoint);

        $.post("#{subscribe_attendance_notifications_path}", {subscription: subscription.toJSON()});

        return fetch('<%=subscribe_attendance_notifications_path%> %>', {
          method: 'post',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify(subscription)
        });
      }));
});

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
self.addEventListener("push", onPush);
self.addEventListener('notificationclick', onNotificationClick)
