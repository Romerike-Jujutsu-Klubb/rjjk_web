ruby:
  mbr = graduate.member
  fn = mbr.first_name.split(/\s+/).each { |x| x.capitalize! }.join(' ')
  ln = mbr.last_name.split(/\s+/).each { |x| x.capitalize! }.join(' ')
  member_age = mbr.age(graduate.graduation.held_on)
  if graduate.graduation.held_on
    below_minimum_age = member_age && member_age < graduate.rank.minimum_age
    not_in_rank_age = !(graduate.rank.group.from_age..graduate.rank.group.to_age).include?(member_age)
    if graduate.graduation.group
      not_in_group_age = member_age && (mbr.age(graduate.graduation.held_on - 1.month) > graduate.graduation.group.to_age || member_age < graduate.graduation.group.from_age)
    end
  end

tr id="graduate_#{graduate.id || "m#{graduate.member_id}"}"
  - if !graduate.graduation.approved? && (graduate.new_record? || graduate.passed == false)
    td
      - if graduate.new_record?
        a href=with_detour(graduates_path(graduate: { graduation_id: graduate.graduation_id, member_id: graduate.member_id }), edit_graduation_path(graduate.graduation_id, anchor: :graduates_tab)) title='Legg til' data-method=:post
          i.fa.fa-arrow-left>
      - elsif graduate.passed == false
        a href=with_detour(graduate_path(graduate), edit_graduation_path(graduate.graduation_id, anchor: :graduates_tab)) data-method=:delete data-remote=false
          i.fa.fa-arrow-left title="Sett som kandidat"
  td
    = link_to "#{fn} #{ln}", edit_member_path(mbr)
    - if below_minimum_age || not_in_rank_age || not_in_group_age
      '
      | (<span class="text-danger text-nowrap">#{member_age} år</span>)
    - if graduate.persisted? && graduate.changed?
      '
      | &nbsp;<span class="text-danger">* IKKE LAGRET! *</span>
  - if graduate.graduation.locked? && !graduate.graduation.approved?
    td
      - if graduate.confirmed_at
        span.fa.fa-thumbs-up data-toggle="tooltip" title="#{graduate.member.first_name} bekreftet #{graduate.confirmed_at.strftime('%F %R')}"
      - elsif graduate.invitation_sent_at
        span.fa.fa-question data-toggle="tooltip" title="Invitert #{graduate.invitation_sent_at.strftime('%F %R')}"
  - if (graduate.graduation.held_on&.<= Date.current) && (!graduate.passed?|| !graduate.graduation.group.school_breaks?)
    td
      - if graduate.graduation.approved?
        = graduate.passed ? 'Ja' : 'Nei'
      - else
        = bootstrap_form_for graduate, html: { remote: true, class: 'form-inline' } do |f|
          / FIXME(uwe): Prettier 3-way button
          /= f.radio_button :passed, true, label: :Ja, class: 'mr-1', label_class: 'mr-2', onchange: "$('#passed_btn_#{graduate.id}').click()"
          /= f.radio_button :passed, false, label: :Nei, class: 'mr-1', onchange: "$('#passed_btn_#{graduate.id}').click()"
          / https://codepen.io/Davide_sd/pen/AmazD
          .btn-group data-toggle="buttons"
            label.btn.btn-sm.p-1 class=("btn-#{'outline-' unless graduate.passed}success")
              | Ja
              input.ml-1 type="radio" name="graduate[passed]" id="graduate_passed_true" value=:true autocomplete="off" checked=graduate.passed onchange="$('#passed_btn_#{graduate.id}').click()"
            label.btn.btn-sm.p-1 class=("btn-#{'outline-' unless graduate.passed == false}danger")
              input.mr-1 type="radio" name="graduate[passed]" id="graduate_passed_false" value=:false autocomplete="off" checked=graduate.passed==false onchange="$('#passed_btn_#{graduate.id}').click()" Nei

          = f.submit id: "passed_btn_#{graduate.id}", class: 'sr-only'
  td
    - if graduate.graduation.approved?
      = graduate.rank.label
    - else
      - next_rank = mbr.next_rank(graduate.graduation)
      = form_for graduate, html: { remote: true } do |f|
        - if graduate.new_record?
          = f.hidden_field :graduation_id
          = f.hidden_field :member_id
        = f.select :rank_id, @ranks.map { |r| [r.label + (r == next_rank ? ' *' : ''), r.id] }, {}, class: 'form-control form-control-sm', onchange: "$('#rank_btn_#{graduate.id || "m#{graduate.member_id}"}').click()"
        = f.submit 'Preview', id: "rank_btn_#{graduate.id || "m#{graduate.member_id}"}", class: 'sr-only'

      - graduated = graduate.member.graduates.find { |gr2| gr2 != graduate && gr2.passed && gr2.rank_id == graduate.rank_id }
      - if graduated
        div.text-danger Har allerede bestått denne graden (#{link_to graduated.graduation.held_on, action: :index, id: graduated.graduation_id}).
      - else
        - current_graduate = mbr.current_graduate(graduate.graduation.group.martial_art, graduate.graduation.held_on)
        - if next_rank && graduate.rank != next_rank
          - if current_graduate
            div
              ' Har #{current_graduate.rank.name} fra
              = link_to current_graduate.graduation.held_on, edit_graduation_path(current_graduate.graduation_id), class: 'text-danger'
              | .
          - else
            div Har ingen grad fra før.
          div.text-danger Anbefalt neste grad er #{next_rank.label}.

        - if not_in_group_age
          div.text-danger Feil gruppe!  #{graduate.graduation.group.name} er #{graduate.graduation.group.from_age}-#{graduate.graduation.group.to_age} år.

        - if below_minimum_age
          div.text-danger Aldersgrense for #{graduate.rank.name} er #{graduate.rank.minimum_age} år.
        - elsif not_in_rank_age
          div.text-danger Aldersgruppe for #{graduate.rank.name} er #{graduate.rank.group.from_age}-#{graduate.rank.group.to_age} år.
        - future_graduates = mbr.future_graduates(graduate.graduation.held_on, graduate.graduation.martial_art)
        - future_graduates.select { |fg| fg.rank.position < graduate.rank.position }.each do |fg|
          div
            | (konflikt: #{link_to "#{fg.rank.name} #{fg.graduation.held_on}", {controller: :graduations, action: :index, id: fg.graduation.id},class: 'text-danger'})

        - training_attendances = graduate.training_attendances
        - minimum_attendances = graduate.minimum_attendances
        - if training_attendances == 0
          div.text-danger Har ikke vært på trening siden #{current_graduate ? 'forrige gradering' : 'innmelding'} (#{graduate.training_start_date}).
        - elsif training_attendances < minimum_attendances
          div
            ' Har bare vært på
            => link_to "#{training_attendances} trening#{'er' if training_attendances > 1}", { controller: :attendances, action: :since_graduation, id: mbr.id, date: graduate.graduation.held_on }, class: "text-danger"
            ' siden
            - if current_graduate
              ' forrige gradering (#{current_graduate.graduation.held_on}).
            - else
              ' innmelding (#{graduate.training_start_date}).
          div
            ' Forventet er #{minimum_attendances}-#{graduate.expected_attendances}
            /- if minimum_attendances <= graduate.registered_trainings
            /  ' av #{graduate.registered_trainings}
            | registrerte treninger.

        - if graduate.member.left_on && graduate.member.left_on < graduate.graduation.held_on
          div.text-danger Deltakeren er utmeldt siden #{graduate.member.left_on}.

  - unless graduate.graduation.approved?
    td.text-center
      - if graduate.new_record?
        a href=with_detour(graduates_path(graduate: { graduation_id: graduate.graduation_id, member_id: graduate.member_id, passed: false }), edit_graduation_path(graduate.graduation_id, anchor: :graduates_tab)) data-method=:post
          i.fa.fa-arrow-right
      - elsif graduate.passed != false
        = link_to({ controller: :graduates, action: :destroy, id: graduate.id }, method: :delete, remote: false) do
          i.fa.fa-arrow-right.text-danger title="Fjern"

javascript:
    $('#graduate_#{graduate.id || "m#{graduate.member_id}"}').find("form").on('ajax:beforeSend', function (event, xhr, settings) {
        $('#graduate_#{graduate.id || "m#{graduate.member_id}"}').replaceWith('<tr id="graduate_#{graduate.id || "m#{graduate.member_id}"}"><td></td><td>#{graduate.member.name}</td><td>Oppdaterer...</td><td></td></tr>')
    });
