#!/bin/bash
#
# rjjk_web_beta      Startup script for the RJJK web beta application
#
# chkconfig: 345 88 12
# description: RJJK web beta application
# pidfile: /u/apps/rjjk_web_beta/shared/pids/server.pid

. /etc/rc.d/init.d/functions

APP=rjjk_web_beta
RAILS_ENV=beta
PORT=3010
RUN_AS_USER=capistrano
PIDFILE="/u/apps/$APP/shared/pids/server.pid"
APP_DIR="/u/apps/$APP/current"
LOG_DIR="/u/apps/$APP/shared/log"
GC_OPTS='-J-verbose:gc -J-XX:+PrintGCTimeStamps -J-XX:+PrintGCDateStamps -J-Xloggc:${LOG_DIR}/gc.log'

START_CMD="cd $APP_DIR ;
  source \"$HOME/.rvm/scripts/rvm\" ; rvm use jruby ;
  export JRUBY_OPTS='${GC_OPTS} -J-Xmx2G --server -J-Djava.awt.headless=true -J-Dawt.toolkit=sun.awt.HToolkit' ;
  jruby --version ;
  jruby -S bundle exec puma -d -t 0:20 -p $PORT -e $RAILS_ENV --pidfile $PIDFILE >$LOG_DIR/stdout.log 2>&1

  echo -n 'Waiting for server to start'
  for j in {1..60} ; do
    if (exec >/dev/null 2>&1 6<>/dev/tcp/127.0.0.1/$PORT) ; then
      break
    fi
    echo -n .
    sleep 1
  done
  echo -n '$j '
  if (exec >/dev/null 2>&1 6<>/dev/tcp/127.0.0.1/$PORT) ; then
    echo OK
    sleep 5
    echo '$APP restarted.'
  else
    echo FAILED
    echo '$APP failed to restart.'
  fi
"

USER=`whoami`

run() {
	cmd=$1
	if [ "$USER" != "$RUN_AS_USER" ]; then
		echo Running as $USER
        echo su - $RUN_AS_USER -c \"$cmd\"
        su - $RUN_AS_USER -c "$cmd"
    else
    	echo $cmd
        eval "$cmd"
    fi
}

start() {
  if [ -f $PIDFILE ] ; then
    PID=`cat $PIDFILE`
    if [ `ps h $PID > /dev/null` ] ; then
      echo $APP is already running.
      exit 1
    fi
  fi
  run "$START_CMD"
}

stop() {
  if [ -f $PIDFILE ] ; then
    PID=`cat $PIDFILE`
    if ps h $PID > /dev/null ; then
      run "kill $PID"
    else
      echo deleting stale PID file $PID
    fi
    rm -f ${pidfile}
  else
    echo $APP is not running.
  fi
}

# See how we were called.
case "$1" in
  start)
    start
        ;;
  stop)
    stop
        ;;
  restart)
    stop
    start
        ;;
  status)
    if [ -f $PIDFILE ] ; then
      PID=`cat $PIDFILE`
      if kill -0 $PID ; then
        echo $APP is running as $PID
      else
        echo $APP pid $PID is dead!
      fi
    else
      echo $APP is not running.
    fi
        ;;
  *)
        echo "Usage: $prog {start|stop|restart|status}"
        exit 1
esac

exit 0
